stages:
  - build
  - deploy

variables:
  MAVEN_CLI_OPTS: "-s .ci/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository/

build:
  stage: build
  image: tinymediamanager/packaging:20221121194626
  environment:
    name: test
    url: https://test.tinymediamanager.org
  allow_failure: false
  tags:
    - tmm # force running on own runners
  script:
    # generate changelog.txt
    - sh generate_changelog.sh

    # package archives
    - mvn $MAVEN_CLI_OPTS -U -P dist -DbuildNumber=${CI_COMMIT_SHORT_SHA} -Dgetdown=getdown-test.txt -Dtier=test -Dthread_pool_size=1 clean package

    # build Windows installer
    - chmod 777 . dist
    - sudo -u xclient PATH=$PATH:/opt/bin AppBundler/create_windows_installer.sh "$CODE_SIGN_CERT" "$CODE_SIGN_PASS"

    # push the build to the webserver
    - lftp -c "set ftp:ssl-allow no; open -u ${FTP_USER_TEST},${FTP_PASSWORD_TEST} ${FTP_HOST}; mirror -Rev target/tinyMediaManager-getdown/ ./upload/v5/build; mirror -Rev dist/ ./upload/v5/dist; chmod -R g+rw ./upload/v5"

  artifacts:
    expire_in: 2 hours
    paths:
      - dist/tinyMediaManager*linux-amd64.tar.xz # upload for docker build
      - dist/tinyMediaManager*linux-arm64.tar.xz # upload for docker build
      - target/docker # compiled Dockerfile
      - target/tinyMediaManager*macos*.zip # for macOS build

build-mac:
  stage: build
  needs:
    - build
  dependencies:
    - build
  allow_failure: false
  tags:
    - tmm-mac # force running on own macOS runners
  script:
    # remove linux build (no need to upload this twice)
    - rm dist/tinyMediaManager*linux-amd64.tar.xz
    - rm dist/tinyMediaManager*linux-arm64.tar.xz

    # create macOS bundles
    - sh AppBundler/create_mac_image.sh

    # push the build to the webserver
    - lftp -c "set ftp:ssl-allow no; open -u ${FTP_USER_TEST},${FTP_PASSWORD_TEST} ${FTP_HOST}; mirror -Rv dist/ ./upload/v5/dist; chmod -R g+w ./upload/v5"

deploy-docker:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [ "" ]
  variables:
    IMAGE_NAME: tinymediamanager/tinymediamanager
  environment:
    name: test
    url: https://test.tinymediamanager.org
  needs:
    - build
  tags:
    - tmm # force running on own runners
  before_script:
    - GHPRJ="https://github.com/estesp/manifest-tool"
    - VERSION="v2.0.8"
    - ARTIFACT="manifest-tool-linux-amd64"
    - URL="$GHPRJ/releases/download/$VERSION/$ARTIFACT"
    - apt install curl
    - curl -L -o ${CI_PROJECT_DIR}/target/manifest-tool $URL
    - chmod +x ${CI_PROJECT_DIR}/target/manifest-stool
  script:
    # create login credentials
    - echo -e $DOCKERHUB_AUTH > /kaniko/.docker/config.json

    #####################################
    # x64
    #####################################

    # copy data
    - cp -r ${CI_PROJECT_DIR}/target/docker ${CI_PROJECT_DIR}/target/docker-x64
    - tar xJf ${CI_PROJECT_DIR}/dist/tinyMediaManager*linux-amd64.tar.xz -C ${CI_PROJECT_DIR}/target/docker-x64/
    - cd ${CI_PROJECT_DIR}/target/docker-x64

    # build image
    - VERSION=$(grep 'human.version' 'tinyMediaManager/version' | cut -d'=' -f2)
    - |
      /kaniko/executor \
      --context "${CI_PROJECT_DIR}/target/docker-x64" \
      --dockerfile "${CI_PROJECT_DIR}/target/docker-x64/Dockerfile" \
      --custom-platform=linux/amd64/ \
      --destination "${IMAGE_NAME}:5-test-amd64"
    #--destination "${IMAGE_NAME}:${$VERSION}"

    #####################################
    # arm64
    #####################################
    # copy data
    - cp -r ${CI_PROJECT_DIR}/target/docker ${CI_PROJECT_DIR}/target/docker-arm64
    - tar xJf ${CI_PROJECT_DIR}/dist/tinyMediaManager*linux-arm64.tar.xz -C ${CI_PROJECT_DIR}/target/docker-arm64/
    - cd ${CI_PROJECT_DIR}/target/docker-arm64

    # build image
    - VERSION=$(grep 'human.version' 'tinyMediaManager/version' | cut -d'=' -f2)
    - |
      /kaniko/executor \
      --context "${CI_PROJECT_DIR}/target/docker-arm64" \
      --dockerfile "${CI_PROJECT_DIR}/target/docker-arm64/Dockerfile" \
      --custom-platform=linux/arm64/ \
      --destination "${IMAGE_NAME}:5-test-arm64"
    #--destination "${IMAGE_NAME}:${$VERSION}"

    # create the manifest for multiarch tag
    - cd ${CI_PROJECT_DIR}/target/docker
    - echo
    - ${CI_PROJECT_DIR}/manifest-tool push from-args \
      --platforms linux/amd64,linux/arm64 \
      --template tinymediamanager/tinymediamanager:5-test-ARCH \
      --target tinymediamanager/tinymediamanager:latest-test

deploy:
  stage: deploy
  image: curlimages/curl:7.85.0
  environment:
    name: test
    url: https://test.tinymediamanager.org
  tags:
    - tmm # force running on own runners
  script:
    # and publish the files on the webserver
    - curl https://test.tinymediamanager.org/${PUBLISH_ENDPOINT_V5}
