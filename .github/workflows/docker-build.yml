name: Docker Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
  push:
    branches: [ devel ]
    paths:
      - 'Dockerfile*'
      - '.dockerignore'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        # tinyMediaManager Docker 构建
        FROM eclipse-temurin:17-jdk-alpine AS builder
        
        # 安装构建依赖
        RUN apk add --no-cache maven
        
        # 设置工作目录
        WORKDIR /app
        
        # 复制源代码
        COPY . .
        
        # 构建应用
        RUN mvn clean package -DskipTests=true --batch-mode
        
        # 运行时镜像
        FROM eclipse-temurin:17-jre-alpine
        
        # 安装运行时依赖
        RUN apk add --no-cache fontconfig ttf-dejavu bash
        
        # 创建应用用户
        RUN addgroup -g 1000 tmm && adduser -D -u 1000 -G tmm tmm
        
        # 设置工作目录
        WORKDIR /app
        
        # 复制应用文件
        COPY --from=builder /app/target/*.jar app.jar
        COPY --from=builder /app/native/ native/
        
        # 设置权限
        RUN chown -R tmm:tmm /app
        
        # 切换到应用用户
        USER tmm
        
        # 启动命令
        ENTRYPOINT ["java", "-jar", "app.jar"]
        EOF

    - name: Create .dockerignore
      run: |
        cat > .dockerignore << 'EOF'
        .git
        .gitignore
        target/
        dist/
        *.log
        .idea/
        .vscode/
        .DS_Store
        README.md
        docs/
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64' }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "🧪 Testing Docker image..."
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # 基础测试
        docker run --rm "$IMAGE_TAG" --help || echo "Help command test completed"
