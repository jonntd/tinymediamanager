name: Docker Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
  workflow_run:
    workflows: ["Multi-Platform CI/CD Pipeline"]
    types:
      - completed
    branches: [ devel ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TMM_VERSION: "5.2.0"

jobs:
  # 检查是否有可用的构建产物
  check-artifacts:
    name: Check Build Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    outputs:
      has-linux-amd64: ${{ steps.check.outputs.has-linux-amd64 }}
      has-linux-arm64: ${{ steps.check.outputs.has-linux-arm64 }}

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Check available artifacts
      id: check
      run: |
        echo "🔍 Checking available artifacts..."
        ls -la
        
        # 详细列出所有文件用于调试
        echo "📁 所有文件列表:"
        find . -type f -name "*" | head -20
        
        # 检查AMD64构建产物（支持多种命名格式）
        AMD64_FILES=$(find . -type f \( -name "*linux-amd64*" -o -name "*amd64*linux*" \) | head -5)
        if [ -n "$AMD64_FILES" ]; then
          echo "✅ Found AMD64 build files:"
          echo "$AMD64_FILES"
          echo "has-linux-amd64=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No Linux AMD64 artifact found"
          echo "has-linux-amd64=false" >> $GITHUB_OUTPUT
        fi

        # 检查ARM64构建产物（支持多种命名格式）
        ARM64_FILES=$(find . -type f \( -name "*linux-arm64*" -o -name "*arm64*linux*" \) | head -5)
        if [ -n "$ARM64_FILES" ]; then
          echo "✅ Found ARM64 build files:"
          echo "$ARM64_FILES"
          echo "has-linux-arm64=true" >> $GITHUB_OUTPUT
        else
          echo "❌ No Linux ARM64 artifact found"
          echo "has-linux-arm64=false" >> $GITHUB_OUTPUT
        fi

  # 构建 AMD64 Docker 镜像
  docker-build-amd64:
    name: Build Docker Image (AMD64)
    runs-on: ubuntu-latest
    needs: check-artifacts
    if: needs.check-artifacts.outputs.has-linux-amd64 == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux AMD64 artifact
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}
        pattern: "tinyMediaManager-linux-amd64"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Prepare Docker context
      run: |
        echo "🏗️ Preparing Docker context for AMD64..."
        mkdir -p target/docker

        # 调试信息
        echo "📁 当前工作目录: $(pwd)"
        echo "📁 目录内容:"
        ls -la

        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # 使用构建产物
          echo "📦 Extracting build artifacts..."
          
          # 查找可能的artifact目录（支持多种命名格式）
          ARTIFACT_DIRS=$(find . -type d -name "*linux-amd64*" | head -5)
          ARTIFACT_DIR=""
          
          if [ -n "$ARTIFACT_DIRS" ]; then
            ARTIFACT_DIR=$(echo "$ARTIFACT_DIRS" | head -1)
            echo "✅ Found artifact directory: $ARTIFACT_DIR"
          else
            # 检查是否有artifact被下载到当前目录
            echo "🔍 检查当前目录中的构建产物..."
            ARTIFACT_DIR="."
          fi
          
          # 查找构建产物（支持多种命名格式和压缩类型）
          echo "🔍 查找AMD64构建产物..."
          BUILD_FILES=$(find "$ARTIFACT_DIR" -type f \( \
            -name "*tinyMediaManager*linux*amd64*" -o \
            -name "*linux*amd64*tinyMediaManager*" -o \
            -name "*amd64*linux*" \
          \) | head -10)
          
          if [ -n "$BUILD_FILES" ]; then
            echo "✅ 找到构建产物:"
            echo "$BUILD_FILES"
            BUILD_FILE=$(echo "$BUILD_FILES" | head -1)
            
            # 创建目标目录
            mkdir -p target/docker/tinyMediaManager
            
            # 根据文件类型解压
            case "$BUILD_FILE" in
              *.tar.bz2)
                echo "📦 解压 tar.bz2: $BUILD_FILE"
                tar xjf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.bz2 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.tar.gz)
                echo "📦 解压 tar.gz: $BUILD_FILE"
                tar xzf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.gz 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.tar.xz)
                echo "📦 解压 tar.xz: $BUILD_FILE"
                tar xJf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.xz 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.zip)
                echo "📦 解压 zip: $BUILD_FILE"
                unzip -q "$BUILD_FILE" -d target/docker/ || {
                  echo "❌ zip 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *)
                echo "❌ 不支持的文件格式: $BUILD_FILE"
                echo "📁 文件信息:"
                file "$BUILD_FILE"
                exit 1
                ;;
            esac
            
            # 验证并修复目录结构
            echo "🔍 验证目录结构..."
            if [ -d "target/docker/tinyMediaManager" ]; then
              echo "✅ tinyMediaManager 目录已存在"
            elif [ -d "target/docker/tinyMediaManager-*/tinyMediaManager" ]; then
              echo "📂 找到嵌套目录，修复结构..."
              mv target/docker/tinyMediaManager-*/tinyMediaManager target/docker/
              rm -rf target/docker/tinyMediaManager-*
            else
              echo "🔍 查找tinyMediaManager二进制文件..."
              BINARY=$(find target/docker -name "tinyMediaManager" -type f -executable | head -1)
              if [ -n "$BINARY" ]; then
                echo "✅ 找到二进制文件: $BINARY"
                DIR=$(dirname "$BINARY")
                if [ "$DIR" != "target/docker/tinyMediaManager" ]; then
                  echo "📂 修复目录结构..."
                  mkdir -p target/docker/tinyMediaManager
                  mv "$BINARY" target/docker/tinyMediaManager/
                fi
              else
                echo "❌ 未找到tinyMediaManager二进制文件"
                echo "📁 目标目录内容:"
                find target/docker -type f | head -20
                exit 1
              fi
            fi
            
            # 确保二进制文件可执行
            if [ -f "target/docker/tinyMediaManager/tinyMediaManager" ]; then
              chmod +x target/docker/tinyMediaManager/tinyMediaManager
              echo "✅ tinyMediaManager 二进制文件已准备就绪"
            else
              echo "❌ tinyMediaManager 二进制文件未找到"
              exit 1
            fi
            
          else
            echo "❌ 未找到AMD64构建产物"
            echo "📁 可用文件:"
            find . -type f | grep -E "(amd64|linux)" | head -10
            exit 1
          fi
        else
          echo "📝 手动构建模式 - 创建测试结构..."
          mkdir -p target/docker/tinyMediaManager
          cat > target/docker/tinyMediaManager/tinyMediaManager << 'EOF'
#!/bin/bash
echo 'tinyMediaManager AMD64 测试二进制文件 v5.2.0'
EOF
          chmod +x target/docker/tinyMediaManager/tinyMediaManager
          echo "✅ 测试二进制文件已创建"
        fi

        # 验证构建上下文
        echo "🔍 验证 Docker 构建上下文..."
        if [ -d "target/docker/tinyMediaManager" ]; then
          echo "✅ tinyMediaManager 目录已存在"
          ls -la target/docker/tinyMediaManager/
        else
          echo "❌ tinyMediaManager 目录未找到"
          exit 1
        fi

        # 复制 Dockerfile
        if [ -f "src/docker/Dockerfile.amd64" ]; then
          cp src/docker/Dockerfile.amd64 target/docker/Dockerfile.amd64
          echo "✅ Dockerfile.amd64 复制成功"
        else
          echo "❌ 未找到 src/docker/Dockerfile.amd64"
          exit 1
        fi

    - name: Build with Kaniko
      uses: int128/kaniko-action@v1
      with:
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-amd64
        file: target/docker/Dockerfile.amd64
        context: target/docker
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
        build-args: |
          HUMAN_VERSION=${{ env.TMM_VERSION }}
          BUILD_NUMBER=${{ github.sha }}

  # 构建 ARM64 Docker 镜像
  docker-build-arm64:
    name: Build Docker Image (ARM64)
    runs-on: ubuntu-latest
    needs: check-artifacts
    if: needs.check-artifacts.outputs.has-linux-arm64 == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux ARM64 artifact
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}
        pattern: "tinyMediaManager-linux-arm64"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Prepare Docker context
      run: |
        echo "🏗️ Preparing Docker context for ARM64..."
        mkdir -p target/docker

        # 调试信息
        echo "📁 当前工作目录: $(pwd)"
        echo "📁 目录内容:"
        ls -la

        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # 使用构建产物
          echo "📦 Extracting build artifacts..."
          
          # 查找可能的artifact目录（支持多种命名格式）
          ARTIFACT_DIRS=$(find . -type d -name "*linux-arm64*" | head -5)
          ARTIFACT_DIR=""
          
          if [ -n "$ARTIFACT_DIRS" ]; then
            ARTIFACT_DIR=$(echo "$ARTIFACT_DIRS" | head -1)
            echo "✅ Found artifact directory: $ARTIFACT_DIR"
          else
            # 检查是否有artifact被下载到当前目录
            echo "🔍 检查当前目录中的构建产物..."
            ARTIFACT_DIR="."
          fi
          
          # 查找构建产物（支持多种命名格式和压缩类型）
          echo "🔍 查找ARM64构建产物..."
          BUILD_FILES=$(find "$ARTIFACT_DIR" -type f \( \
            -name "*tinyMediaManager*linux*arm64*" -o \
            -name "*linux*arm64*tinyMediaManager*" -o \
            -name "*arm64*linux*" \
          \) | head -10)
          
          if [ -n "$BUILD_FILES" ]; then
            echo "✅ 找到构建产物:"
            echo "$BUILD_FILES"
            BUILD_FILE=$(echo "$BUILD_FILES" | head -1)
            
            # 创建目标目录
            mkdir -p target/docker/tinyMediaManager
            
            # 根据文件类型解压
            case "$BUILD_FILE" in
              *.tar.bz2)
                echo "📦 解压 tar.bz2: $BUILD_FILE"
                tar xjf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.bz2 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.tar.gz)
                echo "📦 解压 tar.gz: $BUILD_FILE"
                tar xzf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.gz 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.tar.xz)
                echo "📦 解压 tar.xz: $BUILD_FILE"
                tar xJf "$BUILD_FILE" -C target/docker/ || {
                  echo "❌ tar.xz 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *.zip)
                echo "📦 解压 zip: $BUILD_FILE"
                unzip -q "$BUILD_FILE" -d target/docker/ || {
                  echo "❌ zip 解压失败，尝试其他方法..."
                  exit 1
                }
                ;;
              *)
                echo "❌ 不支持的文件格式: $BUILD_FILE"
                echo "📁 文件信息:"
                file "$BUILD_FILE"
                exit 1
                ;;
            esac
            
            # 验证并修复目录结构
            echo "🔍 验证目录结构..."
            if [ -d "target/docker/tinyMediaManager" ]; then
              echo "✅ tinyMediaManager 目录已存在"
            elif [ -d "target/docker/tinyMediaManager-*/tinyMediaManager" ]; then
              echo "📂 找到嵌套目录，修复结构..."
              mv target/docker/tinyMediaManager-*/tinyMediaManager target/docker/
              rm -rf target/docker/tinyMediaManager-*
            else
              echo "🔍 查找tinyMediaManager二进制文件..."
              BINARY=$(find target/docker -name "tinyMediaManager" -type f -executable | head -1)
              if [ -n "$BINARY" ]; then
                echo "✅ 找到二进制文件: $BINARY"
                DIR=$(dirname "$BINARY")
                if [ "$DIR" != "target/docker/tinyMediaManager" ]; then
                  echo "📂 修复目录结构..."
                  mkdir -p target/docker/tinyMediaManager
                  mv "$BINARY" target/docker/tinyMediaManager/
                fi
              else
                echo "❌ 未找到tinyMediaManager二进制文件"
                echo "📁 目标目录内容:"
                find target/docker -type f | head -20
                exit 1
              fi
            fi
            
            # 重命名ARM64二进制文件
            if [ -f "target/docker/tinyMediaManager/tinyMediaManager" ]; then
              mv target/docker/tinyMediaManager/tinyMediaManager target/docker/tinyMediaManager/tinyMediaManager-arm64
              chmod +x target/docker/tinyMediaManager/tinyMediaManager-arm64
              echo "✅ tinyMediaManager ARM64 二进制文件已重命名并准备就绪"
            else
              echo "❌ tinyMediaManager 二进制文件未找到"
              exit 1
            fi
            
          else
            echo "❌ 未找到ARM64构建产物"
            echo "📁 可用文件:"
            find . -type f | grep -E "(arm64|linux)" | head -10
            exit 1
          fi
        else
          echo "📝 手动构建模式 - 创建测试结构..."
          mkdir -p target/docker/tinyMediaManager
          cat > target/docker/tinyMediaManager/tinyMediaManager-arm64 << 'EOF'
#!/bin/bash
echo 'tinyMediaManager ARM64 测试二进制文件 v5.2.0'
EOF
          chmod +x target/docker/tinyMediaManager/tinyMediaManager-arm64
          echo "✅ 测试ARM64二进制文件已创建"
        fi

        # 验证构建上下文
        echo "🔍 验证 Docker 构建上下文..."
        if [ -d "target/docker/tinyMediaManager" ]; then
          echo "✅ tinyMediaManager 目录已存在"
          ls -la target/docker/tinyMediaManager/
        else
          echo "❌ tinyMediaManager 目录未找到"
          exit 1
        fi

        # 复制 Dockerfile
        if [ -f "src/docker/Dockerfile.arm64" ]; then
          cp src/docker/Dockerfile.arm64 target/docker/Dockerfile.arm64
          echo "✅ Dockerfile.arm64 复制成功"
        else
          echo "❌ 未找到 src/docker/Dockerfile.arm64"
          exit 1
        fi

    - name: Build with Kaniko
      uses: int128/kaniko-action@v1
      with:
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-arm64
        file: target/docker/Dockerfile.arm64
        context: target/docker
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
        build-args: |
          HUMAN_VERSION=${{ env.TMM_VERSION }}
          BUILD_NUMBER=${{ github.sha }}

  # 创建多架构 manifest
  docker-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [docker-build-amd64, docker-build-arm64]
    if: always() && (needs.docker-build-amd64.result == 'success' || needs.docker-build-arm64.result == 'success')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Create and push manifest
      run: |
        echo "🏗️ Creating multi-arch manifest..."

        # 准备镜像列表
        IMAGES=""
        if [ "${{ needs.docker-build-amd64.result }}" = "success" ]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-amd64"
        fi
        if [ "${{ needs.docker-build-arm64.result }}" = "success" ]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-arm64"
        fi

        echo "Images to include: $IMAGES"

        # 创建并推送 manifest
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }} $IMAGES
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}

        # 创建 latest 标签
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest $IMAGES
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

        echo "✅ Multi-arch manifest created successfully!"
