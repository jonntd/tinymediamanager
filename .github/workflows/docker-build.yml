name: Docker Build

on:
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: choice
        options:
        - linux/amd64
        - linux/arm64
        - linux/amd64,linux/arm64
  workflow_run:
    workflows: ["Multi-Platform CI/CD Pipeline"]
    types:
      - completed
    branches: [ devel ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TMM_VERSION: "5.2.0"

jobs:
  # 检查是否有可用的构建产物
  check-artifacts:
    name: Check Build Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    outputs:
      has-linux-amd64: ${{ steps.check.outputs.has-linux-amd64 }}
      has-linux-arm64: ${{ steps.check.outputs.has-linux-arm64 }}

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}

    - name: Check available artifacts
      id: check
      run: |
        echo "🔍 Checking available artifacts..."
        ls -la

        if ls tinyMediaManager-*-linux-amd64.* 1> /dev/null 2>&1; then
          echo "has-linux-amd64=true" >> $GITHUB_OUTPUT
          echo "✅ Found Linux AMD64 artifact"
        else
          echo "has-linux-amd64=false" >> $GITHUB_OUTPUT
          echo "❌ No Linux AMD64 artifact found"
        fi

        if ls tinyMediaManager-*-linux-arm64.* 1> /dev/null 2>&1; then
          echo "has-linux-arm64=true" >> $GITHUB_OUTPUT
          echo "✅ Found Linux ARM64 artifact"
        else
          echo "has-linux-arm64=false" >> $GITHUB_OUTPUT
          echo "❌ No Linux ARM64 artifact found"
        fi

  # 构建 AMD64 Docker 镜像
  docker-build-amd64:
    name: Build Docker Image (AMD64)
    runs-on: ubuntu-latest
    needs: check-artifacts
    if: needs.check-artifacts.outputs.has-linux-amd64 == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux AMD64 artifact
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}
        pattern: "tinyMediaManager-linux-amd64"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Prepare Docker context
      run: |
        echo "🏗️ Preparing Docker context for AMD64..."
        mkdir -p target/docker

        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # 使用构建产物
          echo "📦 Extracting build artifacts..."
          
          # GitHub Actions下载的artifact在子目录中
          ARTIFACT_DIR="tinyMediaManager-linux-amd64"
          if [ -d "$ARTIFACT_DIR" ]; then
            echo "✅ Found artifact directory: $ARTIFACT_DIR"
            
            # 在artifact目录中查找构建产物（支持多种格式）
            BUILD_FILE=$(find "$ARTIFACT_DIR" -name "tinyMediaManager-*-linux-amd64*" -type f | head -1)
            if [ -n "$BUILD_FILE" ]; then
              echo "Found build file: $BUILD_FILE"
              
              # 支持更多压缩格式
              case "$BUILD_FILE" in
                *.tar.bz2)
                  echo "📦 解压 tar.bz2 格式..."
                  tar xjf "$BUILD_FILE" -C target/docker/
                  ;;
                *.tar.gz)
                  echo "📦 解压 tar.gz 格式..."
                  tar xzf "$BUILD_FILE" -C target/docker/
                  ;;
                *.tar.xz)
                  echo "📦 解压 tar.xz 格式..."
                  tar xJf "$BUILD_FILE" -C target/docker/
                  ;;
                *.zip)
                  echo "📦 解压 zip 格式..."
                  unzip -q "$BUILD_FILE" -d target/docker/
                  ;;
                *)
                  echo "❌ 不支持的文件格式: $BUILD_FILE"
                  exit 1
                  ;;
              esac

              # 验证可执行文件
              if [ -f target/docker/tinyMediaManager/tinyMediaManager ]; then
                echo "✅ tinyMediaManager 二进制文件已找到"
                chmod +x target/docker/tinyMediaManager/tinyMediaManager
              else
                echo "❌ tinyMediaManager 二进制文件未找到"
                echo "📁 tinyMediaManager/ 目录中的文件:"
                ls -la target/docker/tinyMediaManager/ || echo "tinyMediaManager 目录未找到"
                exit 1
              fi
            else
              echo "⚠️ 在 $ARTIFACT_DIR 中未找到 Linux AMD64 构建产物"
              echo "📁 $ARTIFACT_DIR/ 目录内容:"
              ls -la "$ARTIFACT_DIR/"
              echo "📁 查找所有文件:"
              find "$ARTIFACT_DIR" -type f | head -20
              
              # 尝试查找任何可能的构建产物
              ANY_FILE=$(find "$ARTIFACT_DIR" -type f -name "*linux*" | head -1)
              if [ -n "$ANY_FILE" ]; then
                echo "🔍 找到可能的构建产物: $ANY_FILE"
                echo "📦 尝试解压..."
                
                case "$ANY_FILE" in
                  *.tar.bz2|*.tar.gz|*.tar.xz)
                    tar xf "$ANY_FILE" -C target/docker/
                    ;;
                  *.zip)
                    unzip -q "$ANY_FILE" -d target/docker/
                    ;;
                  *)
                    echo "❌ 无法识别的格式，跳过"
                    ;;
                esac
                
                if [ -f target/docker/tinyMediaManager/tinyMediaManager ]; then
                  echo "✅ 成功解压并找到二进制文件"
                  chmod +x target/docker/tinyMediaManager/tinyMediaManager
                else
                  echo "❌ 解压后未找到 tinyMediaManager 二进制文件"
                  exit 1
                fi
              else
                echo "❌ 未找到任何可能的构建产物"
                exit 1
              fi
            fi
          else
            echo "❌ 未找到构建产物目录 $ARTIFACT_DIR"
            echo "📁 当前目录内容:"
            ls -la
            echo "📁 查找任何可能的产物:"
            find . -type f -name "*linux*" | head -10
            exit 1
          fi
        else
          echo "📝 手动构建模式 - 创建最小测试结构..."
          mkdir -p target/docker/tinyMediaManager
          cat > target/docker/tinyMediaManager/tinyMediaManager << 'EOF'
          #!/bin/bash
          echo 'tinyMediaManager AMD64 测试二进制文件'
          EOF
          chmod +x target/docker/tinyMediaManager/tinyMediaManager
        fi

        # 验证构建上下文
        echo "🔍 验证 Docker 构建上下文..."
        if [ -d "target/docker/tinyMediaManager" ]; then
          echo "✅ tinyMediaManager 目录已存在"
          ls -la target/docker/tinyMediaManager/
        else
          echo "❌ tinyMediaManager 目录未找到"
          exit 1
        fi

        # 复制 Dockerfile
        if [ -f "src/docker/Dockerfile.amd64" ]; then
          cp src/docker/Dockerfile.amd64 target/docker/Dockerfile.amd64
          echo "✅ Dockerfile.amd64 复制成功"
        else
          echo "❌ 未找到 src/docker/Dockerfile.amd64"
          exit 1
        fi

    - name: Build with Kaniko
      uses: int128/kaniko-action@v1
      with:
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-amd64
        file: target/docker/Dockerfile.amd64
        context: target/docker
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
        build-args: |
          HUMAN_VERSION=${{ env.TMM_VERSION }}
          BUILD_NUMBER=${{ github.sha }}

  # 构建 ARM64 Docker 镜像
  docker-build-arm64:
    name: Build Docker Image (ARM64)
    runs-on: ubuntu-latest
    needs: check-artifacts
    if: needs.check-artifacts.outputs.has-linux-arm64 == 'true' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux ARM64 artifact
      if: github.event_name == 'workflow_run'
      uses: actions/download-artifact@v4
      with:
        github-token: ${{ secrets.GHCR_PAT }}
        run-id: ${{ github.event.workflow_run.id }}
        pattern: "tinyMediaManager-linux-arm64"

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Prepare Docker context
      run: |
        echo "🏗️ Preparing Docker context for ARM64..."
        mkdir -p target/docker

        if [ "${{ github.event_name }}" = "workflow_run" ]; then
          # 使用构建产物
          echo "📦 Extracting build artifacts..."
          
          # GitHub Actions下载的artifact在子目录中
          ARTIFACT_DIR="tinyMediaManager-linux-arm64"
          if [ -d "$ARTIFACT_DIR" ]; then
            echo "✅ Found artifact directory: $ARTIFACT_DIR"
            
            # 在artifact目录中查找构建产物（支持多种格式）
            BUILD_FILE=$(find "$ARTIFACT_DIR" -name "tinyMediaManager-*-linux-arm64*" -type f | head -1)
            if [ -n "$BUILD_FILE" ]; then
              echo "Found build file: $BUILD_FILE"
              
              # 支持更多压缩格式
              case "$BUILD_FILE" in
                *.tar.bz2)
                  echo "📦 解压 tar.bz2 格式..."
                  tar xjf "$BUILD_FILE" -C target/docker/
                  ;;
                *.tar.gz)
                  echo "📦 解压 tar.gz 格式..."
                  tar xzf "$BUILD_FILE" -C target/docker/
                  ;;
                *.tar.xz)
                  echo "📦 解压 tar.xz 格式..."
                  tar xJf "$BUILD_FILE" -C target/docker/
                  ;;
                *.zip)
                  echo "📦 解压 zip 格式..."
                  unzip -q "$BUILD_FILE" -d target/docker/
                  ;;
                *)
                  echo "❌ 不支持的文件格式: $BUILD_FILE"
                  exit 1
                  ;;
              esac

              # ARM64 特殊处理 (参考 deploy_release.yml)
              if [ -f target/docker/tinyMediaManager/tinyMediaManager-arm ]; then
                echo "🔧 重命名 tinyMediaManager-arm 为 tinyMediaManager..."
                mv target/docker/tinyMediaManager/tinyMediaManager-arm target/docker/tinyMediaManager/tinyMediaManager
                chmod +x target/docker/tinyMediaManager/tinyMediaManager
              elif [ -f target/docker/tinyMediaManager/tinyMediaManager ]; then
                echo "✅ tinyMediaManager 二进制文件已存在"
                chmod +x target/docker/tinyMediaManager/tinyMediaManager
              else
                echo "❌ tinyMediaManager 二进制文件未找到"
                echo "📁 tinyMediaManager/ 目录中的文件:"
                ls -la target/docker/tinyMediaManager/ || echo "tinyMediaManager 目录未找到"
                exit 1
              fi
            else
              echo "⚠️ 在 $ARTIFACT_DIR 中未找到 Linux ARM64 构建产物"
              echo "📁 $ARTIFACT_DIR/ 目录内容:"
              ls -la "$ARTIFACT_DIR/"
              echo "📁 查找所有文件:"
              find "$ARTIFACT_DIR" -type f | head -20
              
              # 尝试查找任何可能的构建产物
              ANY_FILE=$(find "$ARTIFACT_DIR" -type f -name "*linux*" | head -1)
              if [ -n "$ANY_FILE" ]; then
                echo "🔍 找到可能的构建产物: $ANY_FILE"
                echo "📦 尝试解压..."
                
                case "$ANY_FILE" in
                  *.tar.bz2|*.tar.gz|*.tar.xz)
                    tar xf "$ANY_FILE" -C target/docker/
                    ;;
                  *.zip)
                    unzip -q "$ANY_FILE" -d target/docker/
                    ;;
                  *)
                    echo "❌ 无法识别的格式，跳过"
                    ;;
                esac
                
                # ARM64 特殊处理
                if [ -f target/docker/tinyMediaManager/tinyMediaManager-arm ]; then
                  echo "🔧 重命名 tinyMediaManager-arm 为 tinyMediaManager..."
                  mv target/docker/tinyMediaManager/tinyMediaManager-arm target/docker/tinyMediaManager/tinyMediaManager
                  chmod +x target/docker/tinyMediaManager/tinyMediaManager
                elif [ -f target/docker/tinyMediaManager/tinyMediaManager ]; then
                  echo "✅ 成功解压并找到二进制文件"
                  chmod +x target/docker/tinyMediaManager/tinyMediaManager
                else
                  echo "❌ 解压后未找到 tinyMediaManager 二进制文件"
                  exit 1
                fi
              else
                echo "❌ 未找到任何可能的构建产物"
                exit 1
              fi
            fi
          else
            echo "❌ 未找到构建产物目录 $ARTIFACT_DIR"
            echo "📁 当前目录内容:"
            ls -la
            echo "📁 查找任何可能的产物:"
            find . -type f -name "*linux*" | head -10
            exit 1
          fi
        else
          echo "📝 手动构建模式 - 创建最小测试结构..."
          mkdir -p target/docker/tinyMediaManager
          cat > target/docker/tinyMediaManager/tinyMediaManager << 'EOF'
          #!/bin/bash
          echo 'tinyMediaManager ARM64 测试二进制文件'
          EOF
          chmod +x target/docker/tinyMediaManager/tinyMediaManager
        fi

        # 验证构建上下文
        echo "🔍 验证 Docker 构建上下文..."
        if [ -d "target/docker/tinyMediaManager" ]; then
          echo "✅ tinyMediaManager 目录已存在"
          ls -la target/docker/tinyMediaManager/
        else
          echo "❌ tinyMediaManager 目录未找到"
          exit 1
        fi

        # 复制 Dockerfile
        if [ -f "src/docker/Dockerfile.arm64" ]; then
          cp src/docker/Dockerfile.arm64 target/docker/Dockerfile.arm64
          echo "✅ Dockerfile.arm64 复制成功"
        else
          echo "❌ 未找到 src/docker/Dockerfile.arm64"
          exit 1
        fi

    - name: Build with Kaniko
      uses: int128/kaniko-action@v1
      with:
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-arm64
        file: target/docker/Dockerfile.arm64
        context: target/docker
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}
        build-args: |
          HUMAN_VERSION=${{ env.TMM_VERSION }}
          BUILD_NUMBER=${{ github.sha }}

  # 创建多架构 manifest
  docker-manifest:
    name: Create Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [docker-build-amd64, docker-build-arm64]
    if: always() && (needs.docker-build-amd64.result == 'success' || needs.docker-build-arm64.result == 'success')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Create and push manifest
      run: |
        echo "🏗️ Creating multi-arch manifest..."

        # 准备镜像列表
        IMAGES=""
        if [ "${{ needs.docker-build-amd64.result }}" = "success" ]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-amd64"
        fi
        if [ "${{ needs.docker-build-arm64.result }}" = "success" ]; then
          IMAGES="$IMAGES ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}-arm64"
        fi

        echo "Images to include: $IMAGES"

        # 创建并推送 manifest
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }} $IMAGES
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TMM_VERSION }}

        # 创建 latest 标签
        docker manifest create ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest $IMAGES
        docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

        echo "✅ Multi-arch manifest created successfully!"
