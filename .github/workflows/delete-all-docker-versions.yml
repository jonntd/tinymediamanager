name: Delete All Docker Versions

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Á°ÆËÆ§Âà†Èô§ÊâÄÊúâDockerÁâàÊú¨ (ËæìÂÖ• DELETE_ALL_DOCKER Á°ÆËÆ§)'
        required: true
        type: string
      keep_latest:
        description: '‰øùÁïôlatestÊ†áÁ≠æ'
        required: true
        default: false
        type: boolean
  workflow_call:
    inputs:
      keep_latest:
        description: '‰øùÁïôlatestÊ†áÁ≠æ'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  delete-docker-versions:
    name: Delete All Docker Package Versions
    runs-on: ubuntu-latest
    
    steps:
    - name: Validate confirmation
      run: |
        # Ê£ÄÊü•ÊòØÂê¶‰∏∫Â∑•‰ΩúÊµÅË∞ÉÁî®ÔºàÈÄöËøáinputsÂèÇÊï∞Âà§Êñ≠Ôºâ
        if [ -z "${{ github.event.inputs.confirm_deletion }}" ]; then
          echo "‚úÖ Â∑•‰ΩúÊµÅË∞ÉÁî®ÔºåËá™Âä®Á°ÆËÆ§Âà†Èô§Êìç‰Ωú"
          echo "üîç ‰∫ã‰ª∂Á±ªÂûã: ${{ github.event_name }}"
          echo "üîç Ë∞ÉÁî®ÊñπÂºè: workflow_call"
        elif [ "${{ github.event.inputs.confirm_deletion }}" != "DELETE_ALL_DOCKER" ]; then
          echo "‚ùå Á°ÆËÆ§ÊñáÊú¨‰∏çÊ≠£Á°ÆÔºåÊìç‰ΩúÂ∑≤ÂèñÊ∂à"
          echo "ËØ∑ËæìÂÖ•: DELETE_ALL_DOCKER"
          exit 1
        else
          echo "‚úÖ Á°ÆËÆ§ÊñáÊú¨Ê≠£Á°ÆÔºåÁªßÁª≠ÊâßË°åÂà†Èô§Êìç‰Ωú"
        fi

    - name: Get package information
      id: get-package
      run: |
        echo "üîç Ëé∑ÂèñDockerÂåÖ‰ø°ÊÅØ..."
        
        # ËÆæÁΩÆÂåÖÂêç
        PACKAGE_NAME="tinymediamanager"
        echo "üì¶ ÂåÖÂêç: $PACKAGE_NAME"
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        
        # Ê£ÄÊü•ÊòØÂê¶‰øùÁïôlatest
        KEEP_LATEST="${{ github.event.inputs.keep_latest || inputs.keep_latest }}"
        echo "üè∑Ô∏è ‰øùÁïôlatestÊ†áÁ≠æ: $KEEP_LATEST"
        echo "keep_latest=$KEEP_LATEST" >> $GITHUB_OUTPUT

    - name: Get all package versions
      id: get-versions
      run: |
        echo "üîç Ëé∑ÂèñÊâÄÊúâDockerÂåÖÁâàÊú¨..."
        PACKAGE_NAME="${{ steps.get-package.outputs.package_name }}"

        # Â∞ùËØïorgs API
        echo "üîç Â∞ùËØïorgs API..."
        ORGS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions" 2>/dev/null || echo "")

        ORGS_BODY=$(echo "$ORGS_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
        ORGS_STATUS=$(echo "$ORGS_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

        echo "üîç orgs APIÁä∂ÊÄÅ: $ORGS_STATUS"

        if [ "$ORGS_STATUS" = "200" ] && [ -n "$ORGS_BODY" ] && [ "$ORGS_BODY" != "null" ]; then
          VERSIONS_JSON="$ORGS_BODY"
          echo "‚úÖ ‰ΩøÁî®orgs APIÁªìÊûú"
        else
          echo "‚ö†Ô∏è orgs APIÂ§±Ë¥•ÔºåÂ∞ùËØïuser API..."
          USER_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions" 2>/dev/null || echo "")

          USER_BODY=$(echo "$USER_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          USER_STATUS=$(echo "$USER_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

          echo "üîç user APIÁä∂ÊÄÅ: $USER_STATUS"

          if [ "$USER_STATUS" = "200" ] && [ -n "$USER_BODY" ] && [ "$USER_BODY" != "null" ]; then
            VERSIONS_JSON="$USER_BODY"
            echo "‚úÖ ‰ΩøÁî®user APIÁªìÊûú"
          else
            echo "‚ùå ‰∏§‰∏™APIÈÉΩÂ§±Ë¥•‰∫Ü"
            echo "orgs API: $ORGS_STATUS - $ORGS_BODY"
            echo "user API: $USER_STATUS - $USER_BODY"
            echo "has_versions=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi

        # È™åËØÅJSONÊ†ºÂºè
        if ! echo "$VERSIONS_JSON" | jq . >/dev/null 2>&1; then
          echo "‚ùå ËøîÂõûÁöÑ‰∏çÊòØÊúâÊïàÁöÑJSONÊ†ºÂºè"
          echo "ÂéüÂßãÂìçÂ∫î: $VERSIONS_JSON"
          echo "has_versions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Ëé∑ÂèñÁâàÊú¨Êï∞Èáè
        VERSION_COUNT=$(echo "$VERSIONS_JSON" | jq '. | length' 2>/dev/null || echo "0")
        echo "üìä ÊâæÂà∞ $VERSION_COUNT ‰∏™ÁâàÊú¨"

        if [ "$VERSION_COUNT" -eq 0 ]; then
          echo "‚ÑπÔ∏è Ê≤°ÊúâÊâæÂà∞‰ªª‰ΩïÁâàÊú¨"
          echo "has_versions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # ÊòæÁ§∫JSONÁªìÊûÑÁî®‰∫éË∞ÉËØï
        echo "üîç JSONÁªìÊûÑÈ¢ÑËßà:"
        echo "$VERSIONS_JSON" | jq '.[0] | keys' 2>/dev/null || echo "Êó†Ê≥ïËß£ÊûêJSONÁªìÊûÑ"

        # ÊòæÁ§∫ÊâÄÊúâÁâàÊú¨ÁöÑÊ†áÁ≠æ
        echo "üì¶ ÊâÄÊúâÁâàÊú¨ÁöÑÊ†áÁ≠æ:"
        echo "$VERSIONS_JSON" | jq -r '.[].metadata.container.tags[]?' 2>/dev/null | sort || echo "Êó†Ê†áÁ≠æ‰ø°ÊÅØ"

        # ‰øùÂ≠òÁâàÊú¨‰ø°ÊÅØ
        echo "$VERSIONS_JSON" > versions.json
        echo "has_versions=true" >> $GITHUB_OUTPUT
        echo "version_count=$VERSION_COUNT" >> $GITHUB_OUTPUT

    - name: Filter versions to delete
      if: steps.get-versions.outputs.has_versions == 'true'
      id: filter-versions
      run: |
        echo "üîç Á≠õÈÄâË¶ÅÂà†Èô§ÁöÑÁâàÊú¨..."
        KEEP_LATEST="${{ steps.get-package.outputs.keep_latest }}"

        # È¶ñÂÖàÈ™åËØÅJSONÊñá‰ª∂
        if [ ! -f versions.json ]; then
          echo "‚ùå versions.jsonÊñá‰ª∂‰∏çÂ≠òÂú®"
          echo "has_deletions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Ê£ÄÊü•JSONÁªìÊûÑ
        echo "üîç Ê£ÄÊü•JSONÁªìÊûÑ..."
        FIRST_ITEM=$(jq '.[0]' versions.json 2>/dev/null || echo "null")
        if [ "$FIRST_ITEM" = "null" ]; then
          echo "‚ùå JSONÊï∞ÁªÑ‰∏∫Á©∫ÊàñÊ†ºÂºèÈîôËØØ"
          echo "has_deletions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "üîç Á¨¨‰∏Ä‰∏™ÁâàÊú¨ÁöÑÁªìÊûÑ:"
        echo "$FIRST_ITEM" | jq . || echo "Êó†Ê≥ïËß£Êûê"

        # Ê£ÄÊü•ÊòØÂê¶ÊúâidÂ≠óÊÆµ
        HAS_ID=$(echo "$FIRST_ITEM" | jq 'has("id")' 2>/dev/null || echo "false")
        if [ "$HAS_ID" != "true" ]; then
          echo "‚ùå ÁâàÊú¨ÂØπË±°‰∏≠Ê≤°ÊúâidÂ≠óÊÆµ"
          echo "ÂèØÁî®Â≠óÊÆµ:"
          echo "$FIRST_ITEM" | jq 'keys' 2>/dev/null || echo "Êó†Ê≥ïËé∑ÂèñÂ≠óÊÆµÂàóË°®"
          echo "has_deletions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        if [ "$KEEP_LATEST" = "true" ]; then
          echo "üè∑Ô∏è ‰øùÁïôlatestÊ†áÁ≠æÔºåÁ≠õÈÄâÂÖ∂‰ªñÁâàÊú¨..."
          # Á≠õÈÄâÂá∫‰∏çÂåÖÂê´latestÊ†áÁ≠æÁöÑÁâàÊú¨
          VERSIONS_TO_DELETE=$(jq -r '.[] | select((.metadata.container.tags // []) | map(. == "latest") | any | not) | .id' versions.json 2>/dev/null || echo "")
        else
          echo "üóëÔ∏è Âà†Èô§ÊâÄÊúâÁâàÊú¨..."
          # Ëé∑ÂèñÊâÄÊúâÁâàÊú¨ID
          VERSIONS_TO_DELETE=$(jq -r '.[].id' versions.json 2>/dev/null || echo "")
        fi

        if [ -z "$VERSIONS_TO_DELETE" ]; then
          echo "‚ÑπÔ∏è Ê≤°ÊúâÈúÄË¶ÅÂà†Èô§ÁöÑÁâàÊú¨"
          echo "has_deletions=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # ËÆ°ÁÆóË¶ÅÂà†Èô§ÁöÑÊï∞Èáè
        DELETE_COUNT=$(echo "$VERSIONS_TO_DELETE" | wc -l)
        echo "üìä Â∞ÜÂà†Èô§ $DELETE_COUNT ‰∏™ÁâàÊú¨"

        # ÊòæÁ§∫Ë¶ÅÂà†Èô§ÁöÑÁâàÊú¨ID
        echo "üóëÔ∏è Ë¶ÅÂà†Èô§ÁöÑÁâàÊú¨ID:"
        echo "$VERSIONS_TO_DELETE"

        # ‰øùÂ≠òË¶ÅÂà†Èô§ÁöÑÁâàÊú¨ID
        echo "$VERSIONS_TO_DELETE" > versions_to_delete.txt
        echo "has_deletions=true" >> $GITHUB_OUTPUT
        echo "delete_count=$DELETE_COUNT" >> $GITHUB_OUTPUT

    - name: Delete package versions
      if: steps.filter-versions.outputs.has_deletions == 'true'
      run: |
        echo "üóëÔ∏è ÂºÄÂßãÂà†Èô§DockerÂåÖÁâàÊú¨..."
        echo "ÊÄªËÆ°ÈúÄË¶ÅÂà†Èô§: ${{ steps.filter-versions.outputs.delete_count }} ‰∏™ÁâàÊú¨"
        echo ""
        
        PACKAGE_NAME="${{ steps.get-package.outputs.package_name }}"
        SUCCESS_COUNT=0
        FAILED_COUNT=0
        
        while IFS= read -r version_id; do
          if [ -n "$version_id" ]; then
            echo "üóëÔ∏è Âà†Èô§ÁâàÊú¨ID: $version_id"
            
            # Â∞ùËØïorgs APIÂà†Èô§
            echo "üîç Â∞ùËØïorgs APIÂà†Èô§..."
            ORGS_URL="https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions/$version_id"
            echo "üîó orgs URL: $ORGS_URL"

            ORGS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "$ORGS_URL" 2>&1)

            ORGS_BODY=$(echo "$ORGS_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
            ORGS_STATUS=$(echo "$ORGS_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

            echo "üîç orgs APIÂìçÂ∫î: $ORGS_STATUS"
            if [ -n "$ORGS_BODY" ] && [ "$ORGS_BODY" != "$ORGS_RESPONSE" ]; then
              echo "üîç orgs APIÂìçÂ∫î‰Ωì: $ORGS_BODY"
            fi

            if [ "$ORGS_STATUS" = "204" ]; then
              echo "‚úÖ orgs APIÂà†Èô§ÊàêÂäü: $version_id"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ö†Ô∏è orgs APIÂà†Èô§Â§±Ë¥• (HTTP: $ORGS_STATUS)ÔºåÂ∞ùËØïuser API..."

              USER_URL="https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions/$version_id"
              echo "üîó user URL: $USER_URL"

              USER_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
                -X DELETE \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                "$USER_URL" 2>&1)

              USER_BODY=$(echo "$USER_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
              USER_STATUS=$(echo "$USER_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

              echo "üîç user APIÂìçÂ∫î: $USER_STATUS"
              if [ -n "$USER_BODY" ] && [ "$USER_BODY" != "$USER_RESPONSE" ]; then
                echo "üîç user APIÂìçÂ∫î‰Ωì: $USER_BODY"
              fi

              if [ "$USER_STATUS" = "204" ]; then
                echo "‚úÖ user APIÂà†Èô§ÊàêÂäü: $version_id"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              else
                echo "‚ùå ‰∏§‰∏™APIÈÉΩÂà†Èô§Â§±Ë¥•: $version_id"
                echo "   orgs API: $ORGS_STATUS"
                echo "   user API: $USER_STATUS"
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
            fi

            # È™åËØÅÂà†Èô§ÊòØÂê¶ÁúüÁöÑÊàêÂäü
            echo "üîç È™åËØÅÂà†Èô§ÁªìÊûú..."
            VERIFY_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions/$version_id" 2>/dev/null)

            VERIFY_STATUS=$(echo "$VERIFY_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

            if [ "$VERIFY_STATUS" = "404" ]; then
              echo "‚úÖ È™åËØÅÊàêÂäüÔºöÁâàÊú¨Â∑≤‰∏çÂ≠òÂú®"
            else
              echo "‚ö†Ô∏è È™åËØÅÂ§±Ë¥•ÔºöÁâàÊú¨ÂèØËÉΩ‰ªçÂ≠òÂú® (HTTP: $VERIFY_STATUS)"
            fi
            
            # Ê∑ªÂä†Âª∂ËøüÈÅøÂÖçAPIÈôêÂà∂
            sleep 2
          fi
        done < versions_to_delete.txt
        
        echo ""
        echo "üìä Âà†Èô§ÁªüËÆ°:"
        echo "‚úÖ ÊàêÂäüÂà†Èô§: $SUCCESS_COUNT ‰∏™ÁâàÊú¨"
        echo "‚ùå Âà†Èô§Â§±Ë¥•: $FAILED_COUNT ‰∏™ÁâàÊú¨"

    - name: Verify deletion
      if: steps.filter-versions.outputs.has_deletions == 'true'
      run: |
        echo "üîç È™åËØÅÂà†Èô§ÁªìÊûú..."
        PACKAGE_NAME="${{ steps.get-package.outputs.package_name }}"

        # ÈáçÊñ∞Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØÔºå‰ΩøÁî®ÊîπËøõÁöÑAPIË∞ÉÁî®
        echo "üîç Ê£ÄÊü•Ââ©‰ΩôÁâàÊú¨..."

        # Â∞ùËØïorgs API
        ORGS_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/orgs/${{ github.repository_owner }}/packages/container/${PACKAGE_NAME}/versions" 2>/dev/null || echo "")

        ORGS_BODY=$(echo "$ORGS_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
        ORGS_STATUS=$(echo "$ORGS_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

        if [ "$ORGS_STATUS" = "200" ] && [ -n "$ORGS_BODY" ] && [ "$ORGS_BODY" != "null" ]; then
          REMAINING_JSON="$ORGS_BODY"
          echo "‚úÖ ‰ΩøÁî®orgs APIÊ£ÄÊü•ÁªìÊûú"
        else
          echo "‚ö†Ô∏è orgs APIÂ§±Ë¥•ÔºåÂ∞ùËØïuser API..."
          USER_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions" 2>/dev/null || echo "")

          USER_BODY=$(echo "$USER_RESPONSE" | sed -E 's/HTTPSTATUS:[0-9]{3}$//')
          USER_STATUS=$(echo "$USER_RESPONSE" | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')

          if [ "$USER_STATUS" = "200" ] && [ -n "$USER_BODY" ] && [ "$USER_BODY" != "null" ]; then
            REMAINING_JSON="$USER_BODY"
            echo "‚úÖ ‰ΩøÁî®user APIÊ£ÄÊü•ÁªìÊûú"
          else
            echo "‚ùå Êó†Ê≥ïËé∑ÂèñÂâ©‰ΩôÁâàÊú¨‰ø°ÊÅØ"
            echo "‚úÖ DockerÁâàÊú¨Ê∏ÖÁêÜÂÆåÊàêÔºàÊó†Ê≥ïÈ™åËØÅÁªìÊûúÔºâ"
            exit 0
          fi
        fi

        # È™åËØÅJSONÂπ∂Ëé∑ÂèñÊï∞Èáè
        if echo "$REMAINING_JSON" | jq . >/dev/null 2>&1; then
          REMAINING_VERSIONS=$(echo "$REMAINING_JSON" | jq '. | length' 2>/dev/null || echo "0")
        else
          echo "‚ö†Ô∏è ËøîÂõûÁöÑ‰∏çÊòØÊúâÊïàJSONÔºåÂèØËÉΩÂåÖ‰∏çÂ≠òÂú®‰∫Ü"
          REMAINING_VERSIONS="0"
        fi

        echo "üìä Ââ©‰ΩôÁâàÊú¨Êï∞Èáè: $REMAINING_VERSIONS"

        if [ "$REMAINING_VERSIONS" = "0" ]; then
          echo "‚úÖ ÊâÄÊúâÁâàÊú¨Â∑≤Âà†Èô§ÔºåDockerÂåÖÂ∑≤Ê∏ÖÁ©∫"
        else
          echo "‚ÑπÔ∏è ËøòÊúâ $REMAINING_VERSIONS ‰∏™ÁâàÊú¨Ââ©‰Ωô"

          # ÂÆâÂÖ®Âú∞ÊòæÁ§∫Ââ©‰ΩôÁâàÊú¨ÁöÑÊ†áÁ≠æ
          echo "üì¶ Ââ©‰ΩôÁâàÊú¨ÁöÑÊ†áÁ≠æ:"
          if echo "$REMAINING_JSON" | jq -e '.[0].metadata.container.tags' >/dev/null 2>&1; then
            echo "$REMAINING_JSON" | jq -r '.[].metadata.container.tags[]?' 2>/dev/null | sort || echo "Êó†Ê†áÁ≠æ‰ø°ÊÅØ"
          else
            echo "‚ö†Ô∏è Êó†Ê≥ïËß£ÊûêÊ†áÁ≠æ‰ø°ÊÅØÔºå‰ΩÜÁâàÊú¨‰ªçÂ≠òÂú®"
            echo "$REMAINING_JSON" | jq -r '.[].id' 2>/dev/null | head -5 || echo "Êó†Ê≥ïËé∑ÂèñÁâàÊú¨ID"
          fi
        fi

        echo ""
        echo "‚úÖ DockerÁâàÊú¨Ê∏ÖÁêÜÂÆåÊàê"
