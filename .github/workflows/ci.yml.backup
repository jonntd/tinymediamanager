name: CI/CD Pipeline

on:
  push:
    branches: [ devel ]
    tags:
      - 'v*'
  pull_request:
    branches: [ devel ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - release

env:
  MAVEN_OPTS: -Dmaven.repo.local=${{ github.workspace }}/.m2/repository
  JAVA_VERSION: '17'

jobs:




  # 构建阶段
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Build application
      id: build
      continue-on-error: true
      run: |
        mvn clean package --batch-mode -P dist -DbuildNumber="${{ github.sha }}" -DskipSign=true -DskipTests=true -Dmaven.test.skip=true -Ddependency.copy.skip=true

    - name: Auto-fix build errors
      if: steps.build.outcome == 'failure'
      run: |
        echo "🔧 Build failed, attempting simple auto-fix..."
        echo "📝 Trying alternative build command..."
        mvn clean install --batch-mode -DskipTests=true -DskipSign=true -Ddependency.copy.skip=true
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: |
          target/*.jar
          dist/
        retention-days: 30

    - name: Print download links
      run: |
        echo "🎉 Build completed for ${{ matrix.os }}!"
        echo "📦 Artifact name: build-${{ matrix.os }}"
        echo "🔗 Download link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "💡 Go to Actions → This run → Artifacts section to download"

  # Docker构建
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/devel'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-ubuntu-latest
        path: ./artifacts
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/tinymediamanager
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=devel
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Print Docker image links
      run: |
        echo "🐳 Docker image built and pushed successfully!"
        echo "📦 Image tags:"
        echo "${{ steps.meta.outputs.tags }}" | sed 's/^/  - /'
        echo "🔗 Pull command:"
        echo "  docker pull ghcr.io/${{ github.repository_owner }}/tinymediamanager:devel"



  # 发布阶段
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: (startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_type == 'release'))
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.RELEASE_TOKEN }}
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release-artifacts
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Extract version from pom.xml
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Creating release for version: $VERSION"
        
        # Create release
        gh release create "v$VERSION" \
          --title "tinyMediaManager v$VERSION" \
          --notes "Automated release created by GitHub Actions" \
          --draft \
          ../release-artifacts/**/*

        echo "🎉 Release v$VERSION created successfully!"
        echo "🔗 Release page: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
        echo "📦 Download assets from the release page above"

  # 错误分析和自动修复
  auto-fix:
    name: Auto-Fix Build Errors
    runs-on: ubuntu-latest
    needs: [build]
    if: needs.build.result == 'failure'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Analyze and fix errors
      run: |
        echo "🔍 Analyzing build errors..."

        # 创建错误修复脚本
        cat > fix_errors.sh << 'EOF'
        #!/bin/bash

        echo "🤖 Starting automatic error analysis and fixing..."

        # 检查常见的编译错误
        check_and_fix_compilation_errors() {
          echo "📝 Checking for compilation errors..."

          # 检查 JUnit 版本冲突
          if find src/test -name "*.java" -exec grep -l "org.junit.jupiter" {} \; 2>/dev/null | head -1; then
            echo "🔧 Found JUnit 5 imports in test files, converting to JUnit 4..."
            find src/test -name "*.java" -exec sed -i.bak \
              -e 's/import org.junit.jupiter.api.Test;/import org.junit.Test;/g' \
              -e 's/import org.junit.jupiter.api.BeforeEach;/import org.junit.Before;/g' \
              -e 's/import org.junit.jupiter.api.Disabled;/import org.junit.Ignore;/g' \
              -e 's/import static org.junit.jupiter.api.Assertions\.\*/import static org.junit.Assert.*;/g' \
              -e 's/@BeforeEach/@Before/g' \
              -e 's/@Disabled/@Ignore/g' \
              -e 's/void test/public void test/g' \
              -e 's/void setUp/public void setUp/g' \
              {} \;
            echo "✅ JUnit imports fixed"
          fi

          # 检查缺失的 public 修饰符
          find src/test -name "*.java" -exec sed -i.bak \
            -e 's/^\s*@Test\s*$/&\n    public/g' \
            {} \;
        }

        # 检查 Maven 配置问题
        check_and_fix_maven_issues() {
          echo "📝 Checking Maven configuration..."

          # 确保 Maven 命令正确
          if ! mvn validate --batch-mode; then
            echo "🔧 Maven validation failed, checking pom.xml..."
            # 这里可以添加更多 Maven 修复逻辑
          fi
        }

        # 执行修复
        check_and_fix_compilation_errors
        check_and_fix_maven_issues

        echo "🔄 Attempting to build after fixes..."
        mvn clean compile --batch-mode -DskipTests=true

        if [ $? -eq 0 ]; then
          echo "✅ Compilation successful after auto-fix!"
          mvn package --batch-mode -P dist -DskipSign=true -DskipTests=true -Dmaven.test.skip=true
        else
          echo "❌ Auto-fix unsuccessful, manual intervention required"
          exit 1
        fi
        EOF

        chmod +x fix_errors.sh
        ./fix_errors.sh

    - name: Commit fixes if successful
      run: |
        if git diff --quiet; then
          echo "ℹ️ No changes made during auto-fix"
        else
          echo "📝 Committing auto-fixes..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Auto-Fix"
          git add .
          git commit -m "🤖 Auto-fix: Resolve build errors automatically

          - Fixed JUnit version conflicts
          - Corrected test method signatures
          - Applied common build fixes

          Auto-generated by GitHub Actions"
          git push
          echo "✅ Auto-fixes committed and pushed"
        fi

  # 通知阶段
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build, docker, auto-fix]
    if: always()

    steps:
    - name: Notify success
      if: ${{ needs.build.result == 'success' || needs.auto-fix.result == 'success' }}
      run: |
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ Build completed successfully!"
        else
          echo "🤖 Build fixed automatically!"
        fi
        echo "- Build: ${{ needs.build.result }}"
        echo "- Auto-fix: ${{ needs.auto-fix.result }}"
        echo "- Docker: ${{ needs.docker.result }}"

    - name: Notify failure
      if: ${{ needs.build.result == 'failure' && needs.auto-fix.result == 'failure' }}
      run: |
        echo "❌ Build failed and auto-fix unsuccessful!"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Auto-fix: ${{ needs.auto-fix.result }}"
        echo "- Docker: ${{ needs.docker.result }}"
        echo ""
        echo "🔧 Manual intervention required. Common issues to check:"
        echo "1. Check for syntax errors in Java files"
        echo "2. Verify Maven dependencies in pom.xml"
        echo "3. Check for missing imports or package declarations"
        echo "4. Review the build logs above for specific error messages"
        exit 1
