name: Multi-Platform CI/CD Pipeline

on:
  push:
    branches: [ devel, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ devel, main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - release
        - dist

permissions:
  contents: write
  packages: write
  actions: read

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx4096m -Xms2048m -XX:+UseG1GC -XX:MaxMetaspaceSize=512m'
  JAVA_TOOL_OPTIONS: '-Dfile.encoding=UTF-8'
  BUILD_TIMEOUT: 90

jobs:
  # 基础构建和测试作业 (简化版)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        server-id: github-maven
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Extract version
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Project version: $VERSION"

    - name: Check if should release
      id: check-release
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "🚀 This is a release build"
        elif [[ "${{ github.event.inputs.build_type }}" == "release" || "${{ github.event.inputs.build_type }}" == "dist" ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "🚀 Manual release build requested"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "🔨 This is a development build"
        fi

    - name: Skip tests for faster build
      run: |
        echo "⚡ Skipping tests for faster build..."

    - name: Build JAR
      run: |
        echo "🔨 Building JAR with performance optimizations..."
        mvn clean package --batch-mode -T 2 -DskipTests=true -Dmaven.test.skip=true -DskipSign=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAVEN_OPTS: "-Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication"

    - name: Upload base JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: tinymediamanager-jar-${{ steps.version.outputs.version }}
        path: target/*.jar
        retention-days: 30



  # 多平台构建作业 (简化版)
  build-platforms:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/devel'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: "Windows x64"
            os: windows-latest
            assembly: windows-amd64
            artifact-name: windows-amd64
            native-path: native/windows
          - name: "Linux x64"
            os: ubuntu-latest
            assembly: linux-amd64
            artifact-name: linux-amd64
            native-path: native/linux
          - name: "Linux ARM64"
            os: ubuntu-latest
            assembly: linux-arm64
            artifact-name: linux-arm64
            native-path: native/arm
          - name: "macOS x64"
            os: macos-13
            assembly: macos-x86_64
            artifact-name: macos-x86_64
            native-path: native/mac
          - name: "macOS ARM64"
            os: macos-latest
            assembly: macos-aarch64
            artifact-name: macos-aarch64
            native-path: native/mac

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        server-id: github-maven
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Verify native libraries
      run: |
        echo "🔍 Checking native libraries for ${{ matrix.platform.name }}..."
        if [ -d "${{ matrix.platform.native-path }}" ]; then
          echo "✅ Native libraries found:"
          ls -la ${{ matrix.platform.native-path }}/
        else
          echo "⚠️ No native libraries found for this platform"
        fi
      shell: bash

    - name: Build platform distribution
      run: |
        echo "🏗️ Building distribution for ${{ matrix.platform.name }} with optimizations..."
        echo "📋 Using Maven profile: ${{ matrix.platform.assembly }}"
        echo "⚡ Performance: 2 threads, optimized JVM, incremental build"
        mvn package -Pdist,${{ matrix.platform.assembly }} --batch-mode -T 2 -DskipTests=true -Dmaven.test.skip=true -DskipSign=true -Dmaven.javadoc.skip=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAVEN_OPTS: "-Xmx3g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+UseCompressedOops"
      shell: bash

    - name: Create platform package
      run: |
        echo "📦 Creating platform package for ${{ matrix.platform.name }}..."
        echo "🔍 Looking for files matching pattern: tinyMediaManager-*-${{ matrix.platform.assembly }}.*"
        ls -la dist/

        # Check for any file matching the platform pattern
        if ls dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.* 1> /dev/null 2>&1; then
          echo "✅ Package created successfully for ${{ matrix.platform.name }}"
          echo "📁 Found files:"
          ls -la dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.*
        else
          echo "❌ No package found for ${{ matrix.platform.assembly }}"
          echo "📁 Available files in dist/:"
          ls -la dist/ || echo "No dist directory found"
          exit 1
        fi
      shell: bash

    - name: Create professional macOS DMG (GitLab-style, unsigned)
      if: startsWith(matrix.platform.assembly, 'macos-')
      run: |
        echo "🍎 Creating professional macOS DMG for ${{ matrix.platform.name }}..."
        echo "📋 Using GitLab's DMG creation method (without signing)"
        echo "⚠️  Note: This DMG will be unsigned (no Apple Developer account)"
        echo "📋 Users will need to manually allow the app: xattr -dr com.apple.quarantine tinyMediaManager.app"

        # Create temporary directory for DMG creation (GitLab style)
        mkdir -p macos_dmg_${{ matrix.platform.assembly }}
        cd macos_dmg_${{ matrix.platform.assembly }}

        # Extract the ZIP file (same as GitLab method)
        unzip -q -X ../dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.zip -d tinyMediaManager

        # Get version (same as GitLab method)
        VERSION=$(grep 'human.version' tinyMediaManager/tinyMediaManager.app/Contents/Resources/Java/version | cut -d'=' -f2)
        echo "📦 Version: $VERSION"

        # Create .userdir file (same as GitLab method)
        touch tinyMediaManager/tinyMediaManager.app/Contents/Resources/Java/.userdir

        # Create auto-fix script for users
        cat > tinyMediaManager/Fix_macOS_Security.command << 'EOF'
#!/bin/bash
echo "🍎 tinyMediaManager macOS Security Fix"
echo "======================================"
echo ""
echo "This script will remove the quarantine attribute from tinyMediaManager.app"
echo "allowing it to run without security warnings."
echo ""
read -p "Press Enter to continue or Ctrl+C to cancel..."
echo ""

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
APP_PATH="$SCRIPT_DIR/tinyMediaManager.app"

if [ -d "$APP_PATH" ]; then
    echo "🔧 Removing quarantine attribute from tinyMediaManager.app..."
    xattr -dr com.apple.quarantine "$APP_PATH"

    if [ $? -eq 0 ]; then
        echo "✅ Success! tinyMediaManager.app can now run normally."
        echo ""
        echo "You can now double-click tinyMediaManager.app to launch it."
        echo ""
        read -p "Press Enter to close this window..."
    else
        echo "❌ Failed to remove quarantine attribute."
        echo "You may need to run this script with administrator privileges."
        echo ""
        read -p "Press Enter to close this window..."
    fi
else
    echo "❌ tinyMediaManager.app not found in the same directory as this script."
    echo "Please make sure this script is in the same folder as tinyMediaManager.app"
    echo ""
    read -p "Press Enter to close this window..."
fi
EOF

        # Make the script executable
        chmod +x tinyMediaManager/Fix_macOS_Security.command

        # Create a README for users
        cat > tinyMediaManager/README_macOS.txt << 'EOF'
🍎 tinyMediaManager for macOS (GitHub Build)
==========================================

This is an unsigned build from GitHub Actions. macOS will show security warnings
when you try to run tinyMediaManager.app for the first time.

🚀 QUICK FIX (Choose one method):

Method 1: Double-click "Fix_macOS_Security.command"
   - This script will automatically fix the security issue
   - Just follow the prompts

Method 2: Manual fix via Terminal
   - Open Terminal
   - Type: xattr -dr com.apple.quarantine
   - Drag tinyMediaManager.app into Terminal
   - Press Enter

Method 3: System Preferences
   - Try to open tinyMediaManager.app (it will fail)
   - Go to System Preferences > Security & Privacy > General
   - Click "Open Anyway" next to the blocked app message

After using any method above, tinyMediaManager.app will run normally.

For more information, visit: https://github.com/jonntd/tinymediamanager
EOF

        echo "📦 Creating professional DMG with GitLab styling..."

        # Copy DS_Store if available (for proper Finder layout)
        if [[ -f "../AppBundler/macos/DS_Store" ]]; then
          cp ../AppBundler/macos/DS_Store tinyMediaManager/.DS_Store
          echo "✅ Applied Finder layout settings"
        fi

        # Copy auto-launch script if available
        if [[ -f "../AppBundler/macos/auto_launch.sh" ]]; then
          cp ../AppBundler/macos/auto_launch.sh tinyMediaManager/
          chmod +x tinyMediaManager/auto_launch.sh
          echo "✅ Added auto-launch script"
        fi

        # Use GitLab's professional create-dmg tool if available
        if [[ -f "../AppBundler/macos/bin/create-dmg" && -f "../AppBundler/macos/background.png" ]]; then
          echo "🎨 Creating professional DMG with background and layout..."
          chmod +x ../AppBundler/macos/bin/create-dmg
          ../AppBundler/macos/bin/create-dmg \
            --background ../AppBundler/macos/background.png \
            --volname "tinyMediaManager" \
            --window-pos 200 120 \
            --window-size 660 400 \
            --icon-size 100 \
            --icon "tinyMediaManager.app" 160 180 \
            --icon "Fix_macOS_Security.command" 320 180 \
            --icon "README_macOS.txt" 480 180 \
            --hide-extension "tinyMediaManager.app" \
            --hide-extension "Fix_macOS_Security.command" \
            --app-drop-link 500 300 \
            --skip-jenkins \
            --format UDBZ \
            tinyMediaManager.dmg \
            tinyMediaManager
        else
          echo "📦 Creating standard DMG (GitLab tools not found)..."
          hdiutil create -volname "tinyMediaManager" \
            -srcfolder tinyMediaManager \
            -ov -format UDZO \
            tinyMediaManager.dmg
        fi

        # Copy unsigned DMG to dist (with clear naming)
        ditto tinyMediaManager.dmg ../dist/tinyMediaManager-$VERSION-${{ matrix.platform.assembly }}-unsigned.dmg

        echo "✅ Created professional unsigned DMG: tinyMediaManager-$VERSION-${{ matrix.platform.assembly }}-unsigned.dmg"
        echo "🎨 DMG includes professional layout and background (if available)"
        echo "⚠️  Users must manually allow this app in macOS Security & Privacy settings"
        echo "💡 Quick fix: xattr -dr com.apple.quarantine tinyMediaManager.app"

        # Cleanup
        cd ..
        rm -rf macos_dmg_${{ matrix.platform.assembly }}
      shell: bash

    - name: Upload platform artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tinymediamanager-${{ matrix.platform.artifact-name }}-${{ needs.build-and-test.outputs.version }}
        path: |
          dist/*.zip
          dist/*.tar.bz2
          dist/*.dmg
          dist/*.sha256
        retention-days: 30

  # 创建 GitHub Release (暂时禁用)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        echo "📦 Preparing release assets..."
        mkdir -p release-assets

        # 复制所有构建产物到发布目录
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts -name "*.tar.bz2" -exec cp {} release-assets/ \;
        find artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        find artifacts -name "*.jar" -exec cp {} release-assets/ \;

        echo "✅ Release assets prepared:"
        ls -la release-assets/

    - name: Generate release notes
      id: release-notes
      run: |
        echo "📝 Generating release notes..."

        # 提取版本号
        VERSION="${{ needs.build-and-test.outputs.version }}"
        TAG_NAME="${GITHUB_REF#refs/tags/}"

        # 生成发布说明
        cat > release-notes.md << EOF
        # tinyMediaManager ${TAG_NAME}

        ## 🎉 新版本发布

        这是 tinyMediaManager 的 ${TAG_NAME} 版本，支持多个平台。

        ## 📦 下载

        ### Windows
        - **Windows x64**: \`tinyMediaManager-${VERSION}-windows-amd64.zip\`

        ### Linux
        - **Linux x64**: \`tinyMediaManager-${VERSION}-linux-x64.tar.bz2\`
        - **Linux ARM64**: \`tinyMediaManager-${VERSION}-linux-aarch64.tar.bz2\`

        ### macOS
        - **macOS Intel**: \`tinyMediaManager-${VERSION}-macos-x64.tar.bz2\`
        - **macOS Apple Silicon**: \`tinyMediaManager-${VERSION}-macos-aarch64.tar.bz2\`

        ## 🔐 校验和
        每个下载包都提供了 SHA256 校验和文件，请在安装前验证文件完整性。

        ## 📋 系统要求
        - Java 17 或更高版本
        - 支持的操作系统：Windows 10+, macOS 10.14+, Linux (各主要发行版)

        ## 🐛 问题反馈
        如果遇到问题，请在 [GitHub Issues](https://github.com/jonntd/tinymediamanager/issues) 中报告。
        EOF

        echo "release-notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: tinyMediaManager ${{ github.ref_name }}
        body: ${{ steps.release-notes.outputs.release-notes }}
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true

  # 构建状态通知
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()

    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          if [[ "${{ needs.build-platforms.result }}" == "success" || "${{ needs.build-platforms.result }}" == "skipped" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ 构建成功完成" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "message=⚠️ 基础构建成功，但平台构建失败" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ 构建失败" >> $GITHUB_OUTPUT
        fi

    - name: Print build summary
      run: |
        echo "🏗️ 构建摘要"
        echo "=============="
        echo "状态: ${{ steps.status.outputs.message }}"
        echo "基础构建: ${{ needs.build-and-test.result }}"
        echo "平台构建: ${{ needs.build-platforms.result }}"
        echo "版本: ${{ needs.build-and-test.outputs.version }}"
        echo "应该发布: ${{ needs.build-and-test.outputs.should-release }}"
