name: Multi-Platform CI/CD Pipeline

on:
  push:
    branches: [ devel, main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ devel, main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - release
        - dist

permissions:
  contents: write
  packages: write
  actions: read

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx4096m -Xms2048m -XX:+UseG1GC -XX:MaxMetaspaceSize=512m'
  JAVA_TOOL_OPTIONS: '-Dfile.encoding=UTF-8'
  BUILD_TIMEOUT: 90

jobs:
  # Âü∫Á°ÄÊûÑÂª∫ÂíåÊµãËØï‰Ωú‰∏ö (ÁÆÄÂåñÁâà)
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        server-id: github-maven
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Extract version
      id: version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Project version: $VERSION"

    - name: Check if should release
      id: check-release
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "üöÄ This is a release build"
        elif [[ "${{ github.event.inputs.build_type }}" == "release" || "${{ github.event.inputs.build_type }}" == "dist" ]]; then
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "üöÄ Manual release build requested"
        else
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "üî® This is a development build"
        fi

    - name: Skip tests for faster build
      run: |
        echo "‚ö° Skipping tests for faster build..."

    - name: Build JAR
      run: |
        echo "üî® Building JAR with performance optimizations..."
        mvn clean package --batch-mode -T 2 -DskipTests=true -Dmaven.test.skip=true -DskipSign=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAVEN_OPTS: "-Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication"

    - name: Upload base JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: tinymediamanager-jar-${{ steps.version.outputs.version }}
        path: target/*.jar
        retention-days: 30



  # Â§öÂπ≥Âè∞ÊûÑÂª∫‰Ωú‰∏ö (ÁÆÄÂåñÁâà)
  build-platforms:
    name: Build for ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/devel'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: "Windows x64"
            os: windows-latest
            assembly: windows-amd64
            artifact-name: windows-amd64
            native-path: native/windows
          - name: "Linux x64"
            os: ubuntu-latest
            assembly: linux-amd64
            artifact-name: linux-amd64
            native-path: native/linux
          - name: "Linux ARM64"
            os: ubuntu-latest
            assembly: linux-arm64
            artifact-name: linux-arm64
            native-path: native/arm
          - name: "macOS x64"
            os: macos-13
            assembly: macos-x86_64
            artifact-name: macos-x86_64
            native-path: native/mac
          - name: "macOS ARM64"
            os: macos-latest
            assembly: macos-aarch64
            artifact-name: macos-aarch64
            native-path: native/mac

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        server-id: github-maven
        server-username: GITHUB_ACTOR
        server-password: GITHUB_TOKEN

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Verify native libraries
      run: |
        echo "üîç Checking native libraries for ${{ matrix.platform.name }}..."
        if [ -d "${{ matrix.platform.native-path }}" ]; then
          echo "‚úÖ Native libraries found:"
          ls -la ${{ matrix.platform.native-path }}/
        else
          echo "‚ö†Ô∏è No native libraries found for this platform"
        fi
      shell: bash

    - name: Build platform distribution
      run: |
        echo "üèóÔ∏è Building distribution for ${{ matrix.platform.name }} with optimizations..."
        echo "üìã Using Maven profile: ${{ matrix.platform.assembly }}"
        echo "‚ö° Performance: 2 threads, optimized JVM, incremental build"
        mvn package -Pdist,${{ matrix.platform.assembly }} --batch-mode -T 2 -DskipTests=true -Dmaven.test.skip=true -DskipSign=true -Dmaven.javadoc.skip=true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MAVEN_OPTS: "-Xmx3g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+UseCompressedOops"
      shell: bash

    - name: Create platform package
      run: |
        echo "üì¶ Creating platform package for ${{ matrix.platform.name }}..."
        echo "üîç Looking for files matching pattern: tinyMediaManager-*-${{ matrix.platform.assembly }}.*"
        ls -la dist/

        # Check for any file matching the platform pattern
        if ls dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.* 1> /dev/null 2>&1; then
          echo "‚úÖ Package created successfully for ${{ matrix.platform.name }}"
          echo "üìÅ Found files:"
          ls -la dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.*
        else
          echo "‚ùå No package found for ${{ matrix.platform.assembly }}"
          echo "üìÅ Available files in dist/:"
          ls -la dist/ || echo "No dist directory found"
          exit 1
        fi
      shell: bash

    - name: Create professional macOS DMG (GitLab-style, unsigned)
      if: startsWith(matrix.platform.assembly, 'macos-')
      run: |
        set -e  # Exit on any error

        echo "üçé Creating professional macOS DMG for ${{ matrix.platform.name }}..."
        echo "üìã Using GitLab's DMG creation method (without signing)"
        echo "‚ö†Ô∏è  Note: This DMG will be unsigned (no Apple Developer account)"
        echo "üìã Users will need to manually allow the app: xattr -dr com.apple.quarantine tinyMediaManager.app"

        # Create temporary directory for DMG creation (GitLab style)
        mkdir -p macos_dmg_${{ matrix.platform.assembly }}
        cd macos_dmg_${{ matrix.platform.assembly }}

        # Extract the ZIP file (same as GitLab method) with error checking
        ZIP_FILE="../dist/tinyMediaManager-*-${{ matrix.platform.assembly }}.zip"
        if ! ls $ZIP_FILE 1> /dev/null 2>&1; then
          echo "‚ùå Error: No ZIP file found matching pattern: $ZIP_FILE"
          exit 1
        fi

        echo "üì¶ Extracting ZIP file..."
        if ! unzip -q -X $ZIP_FILE -d tinyMediaManager; then
          echo "‚ùå Error: Failed to extract ZIP file"
          exit 1
        fi

        # Verify app bundle exists
        if [[ ! -d "tinyMediaManager/tinyMediaManager.app" ]]; then
          echo "‚ùå Error: tinyMediaManager.app not found in extracted files"
          echo "üìÅ Available files:"
          ls -la tinyMediaManager/ || true
          exit 1
        fi

        # Get version (same as GitLab method) with error checking
        VERSION_FILE="tinyMediaManager/tinyMediaManager.app/Contents/Resources/Java/version"
        if [[ ! -f "$VERSION_FILE" ]]; then
          echo "‚ùå Error: Version file not found: $VERSION_FILE"
          exit 1
        fi

        VERSION=$(grep 'human.version' "$VERSION_FILE" | cut -d'=' -f2)
        if [[ -z "$VERSION" ]]; then
          echo "‚ùå Error: Could not extract version from $VERSION_FILE"
          exit 1
        fi
        echo "üì¶ Version: $VERSION"

        # Create .userdir file (same as GitLab method)
        touch tinyMediaManager/tinyMediaManager.app/Contents/Resources/Java/.userdir

        # Fix critical macOS app permissions (GitLab does this automatically)
        echo "üîß Fixing macOS app permissions and structure..."

        # Ensure the main executable has correct permissions
        MAIN_EXECUTABLE="tinyMediaManager/tinyMediaManager.app/Contents/MacOS/tinyMediaManager"
        if [[ -f "$MAIN_EXECUTABLE" ]]; then
          chmod +x "$MAIN_EXECUTABLE"
          echo "‚úÖ Set executable permissions for main app"
        else
          echo "‚ùå Warning: Main executable not found at $MAIN_EXECUTABLE"
          echo "üìÅ Available files in MacOS directory:"
          ls -la "tinyMediaManager/tinyMediaManager.app/Contents/MacOS/" || echo "MacOS directory not found"
        fi

        # Ensure Info.plist exists and is readable
        INFO_PLIST="tinyMediaManager/tinyMediaManager.app/Contents/Info.plist"
        if [[ -f "$INFO_PLIST" ]]; then
          chmod 644 "$INFO_PLIST"
          echo "‚úÖ Set correct permissions for Info.plist"
          echo "üìã Info.plist CFBundleExecutable: $(plutil -extract CFBundleExecutable raw "$INFO_PLIST" 2>/dev/null || echo 'Not found')"
        else
          echo "‚ùå Warning: Info.plist not found at $INFO_PLIST"
        fi

        # Set correct permissions for the entire app bundle
        chmod -R u+rw,go+r "tinyMediaManager/tinyMediaManager.app"
        find "tinyMediaManager/tinyMediaManager.app" -type d -exec chmod 755 {} \;
        echo "‚úÖ Set correct permissions for entire app bundle"

        # Create comprehensive auto-fix script for users
        cat > tinyMediaManager/Fix_macOS_Security.command <<-'SCRIPT_EOF'
#!/bin/bash
set -e

echo "üçé tinyMediaManager macOS Comprehensive Fix"
echo "==========================================="
echo ""
echo "This script will fix common macOS issues with unsigned apps:"
echo "- Remove quarantine attributes"
echo "- Fix file permissions"
echo "- Verify app bundle structure"
echo ""
read -p "Press Enter to continue or Ctrl+C to cancel..."
echo ""

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
APP_PATH="$SCRIPT_DIR/tinyMediaManager.app"

if [ -d "$APP_PATH" ]; then
    echo "üîß Step 1: Removing quarantine attribute..."
    if xattr -dr com.apple.quarantine "$APP_PATH" 2>/dev/null; then
        echo "‚úÖ Quarantine attribute removed successfully"
    else
        echo "‚ö†Ô∏è  Quarantine attribute removal failed (may not be needed)"
    fi

    echo ""
    echo "üîß Step 2: Fixing file permissions..."

    # Fix main executable permissions
    MAIN_EXEC="$APP_PATH/Contents/MacOS/tinyMediaManager"
    if [ -f "$MAIN_EXEC" ]; then
        chmod +x "$MAIN_EXEC"
        echo "‚úÖ Fixed main executable permissions"
    else
        echo "‚ùå Main executable not found: $MAIN_EXEC"
    fi

    # Fix Info.plist permissions
    INFO_PLIST="$APP_PATH/Contents/Info.plist"
    if [ -f "$INFO_PLIST" ]; then
        chmod 644 "$INFO_PLIST"
        echo "‚úÖ Fixed Info.plist permissions"
    else
        echo "‚ùå Info.plist not found: $INFO_PLIST"
    fi

    # Fix overall app bundle permissions
    chmod -R u+rw,go+r "$APP_PATH"
    find "$APP_PATH" -type d -exec chmod 755 {} \;
    echo "‚úÖ Fixed app bundle permissions"

    echo ""
    echo "üîß Step 3: Verifying app structure..."

    # Check critical files
    if [ -f "$MAIN_EXEC" ] && [ -f "$INFO_PLIST" ]; then
        echo "‚úÖ App structure looks good"
        echo ""
        echo "üéâ All fixes applied successfully!"
        echo ""
        echo "You can now double-click tinyMediaManager.app to launch it."
        echo ""
        echo "If you still get errors, try:"
        echo "1. Right-click tinyMediaManager.app and select 'Open'"
        echo "2. Go to System Preferences > Security & Privacy > General"
        echo "3. Click 'Open Anyway' if prompted"
        echo ""
    else
        echo "‚ùå App structure appears to be damaged"
        echo "Please re-download the application"
        echo ""
    fi

    read -p "Press Enter to close this window..."
else
    echo "‚ùå tinyMediaManager.app not found in the same directory as this script."
    echo "Please make sure this script is in the same folder as tinyMediaManager.app"
    echo ""
    read -p "Press Enter to close this window..."
    exit 1
fi
SCRIPT_EOF

        # Make the script executable
        chmod +x tinyMediaManager/Fix_macOS_Security.command

        # Create a README for users
        cat > tinyMediaManager/README_macOS.txt <<-'README_EOF'
üçé tinyMediaManager for macOS (GitHub Build)
==========================================

This is an unsigned build from GitHub Actions. macOS will show security warnings
when you try to run tinyMediaManager.app for the first time.

üöÄ QUICK FIX (Choose one method):

Method 1: Double-click "Fix_macOS_Security.command"
   - This script will automatically fix the security issue
   - Just follow the prompts

Method 2: Manual fix via Terminal
   - Open Terminal
   - Type: xattr -dr com.apple.quarantine
   - Drag tinyMediaManager.app into Terminal
   - Press Enter

Method 3: System Preferences
   - Try to open tinyMediaManager.app (it will fail)
   - Go to System Preferences > Security & Privacy > General
   - Click "Open Anyway" next to the blocked app message

After using any method above, tinyMediaManager.app will run normally.

For more information, visit: https://github.com/jonntd/tinymediamanager
README_EOF

        echo "üì¶ Creating professional DMG with GitLab styling..."

        # Copy DS_Store if available (for proper Finder layout)
        if [[ -f "../AppBundler/macos/DS_Store" ]]; then
          cp ../AppBundler/macos/DS_Store tinyMediaManager/.DS_Store
          echo "‚úÖ Applied Finder layout settings"
        fi

        # Copy auto-launch script if available
        if [[ -f "../AppBundler/macos/auto_launch.sh" ]]; then
          cp ../AppBundler/macos/auto_launch.sh tinyMediaManager/
          chmod +x tinyMediaManager/auto_launch.sh
          echo "‚úÖ Added auto-launch script"
        fi

        # Use GitLab's professional create-dmg tool if available
        if [[ -f "../AppBundler/macos/bin/create-dmg" && -f "../AppBundler/macos/background.png" ]]; then
          echo "üé® Creating professional DMG with background and layout..."
          chmod +x ../AppBundler/macos/bin/create-dmg

          # Build create-dmg arguments dynamically based on file existence
          DMG_ARGS=(
            --background ../AppBundler/macos/background.png
            --volname "tinyMediaManager"
            --window-pos 200 120
            --window-size 660 400
            --icon-size 100
            --app-drop-link 500 300
            --skip-jenkins
            --format UDBZ
          )

          # Add icon positioning for files that exist
          if [[ -d "tinyMediaManager/tinyMediaManager.app" ]]; then
            DMG_ARGS+=(--icon "tinyMediaManager.app" 160 180)
            DMG_ARGS+=(--hide-extension "tinyMediaManager.app")
            echo "‚úÖ Will position tinyMediaManager.app icon"
          fi

          if [[ -f "tinyMediaManager/Fix_macOS_Security.command" ]]; then
            DMG_ARGS+=(--icon "Fix_macOS_Security.command" 320 180)
            DMG_ARGS+=(--hide-extension "Fix_macOS_Security.command")
            echo "‚úÖ Will position Fix_macOS_Security.command icon"
          fi

          if [[ -f "tinyMediaManager/README_macOS.txt" ]]; then
            DMG_ARGS+=(--icon "README_macOS.txt" 480 180)
            echo "‚úÖ Will position README_macOS.txt icon"
          fi

          # Create DMG with dynamic arguments
          ../AppBundler/macos/bin/create-dmg "${DMG_ARGS[@]}" tinyMediaManager.dmg tinyMediaManager

          if [[ $? -eq 0 ]]; then
            echo "‚úÖ Professional DMG created successfully"
          else
            echo "‚ùå Professional DMG creation failed, falling back to standard DMG"
            hdiutil create -volname "tinyMediaManager" \
              -srcfolder tinyMediaManager \
              -ov -format UDZO \
              tinyMediaManager.dmg
          fi
        else
          echo "üì¶ Creating standard DMG (GitLab tools not found)..."
          hdiutil create -volname "tinyMediaManager" \
            -srcfolder tinyMediaManager \
            -ov -format UDZO \
            tinyMediaManager.dmg
        fi

        # Verify DMG was created successfully
        if [[ ! -f "tinyMediaManager.dmg" ]]; then
          echo "‚ùå Error: DMG file was not created"
          exit 1
        fi

        # Copy unsigned DMG to dist (with clear naming) and verify
        DMG_NAME="tinyMediaManager-$VERSION-${{ matrix.platform.assembly }}-unsigned.dmg"
        if ! ditto tinyMediaManager.dmg "../dist/$DMG_NAME"; then
          echo "‚ùå Error: Failed to copy DMG to dist directory"
          exit 1
        fi

        # Verify final DMG exists and get size
        if [[ -f "../dist/$DMG_NAME" ]]; then
          DMG_SIZE=$(ls -lh "../dist/$DMG_NAME" | awk '{print $5}')
          echo "‚úÖ Created professional unsigned DMG: $DMG_NAME ($DMG_SIZE)"
          echo "üé® DMG includes professional layout and background (if available)"
          echo "‚ö†Ô∏è  Users must manually allow this app in macOS Security & Privacy settings"
          echo "üí° Quick fix: xattr -dr com.apple.quarantine tinyMediaManager.app"
        else
          echo "‚ùå Error: Final DMG verification failed"
          exit 1
        fi

        # Cleanup
        cd ..
        rm -rf macos_dmg_${{ matrix.platform.assembly }}
        echo "üßπ Cleanup completed"
      shell: bash

    - name: Upload platform artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tinymediamanager-${{ matrix.platform.artifact-name }}-${{ needs.build-and-test.outputs.version }}
        path: |
          dist/*.zip
          dist/*.tar.bz2
          dist/*.dmg
          dist/*.sha256
        retention-days: 30

  # ÂàõÂª∫ GitHub Release (ÊöÇÊó∂Á¶ÅÁî®)
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        echo "üì¶ Preparing release assets..."
        mkdir -p release-assets

        # Â§çÂà∂ÊâÄÊúâÊûÑÂª∫‰∫ßÁâ©Âà∞ÂèëÂ∏ÉÁõÆÂΩï
        find artifacts -name "*.zip" -exec cp {} release-assets/ \;
        find artifacts -name "*.tar.bz2" -exec cp {} release-assets/ \;
        find artifacts -name "*.sha256" -exec cp {} release-assets/ \;
        find artifacts -name "*.jar" -exec cp {} release-assets/ \;

        echo "‚úÖ Release assets prepared:"
        ls -la release-assets/

    - name: Generate release notes
      id: release-notes
      run: |
        echo "üìù Generating release notes..."

        # ÊèêÂèñÁâàÊú¨Âè∑
        VERSION="${{ needs.build-and-test.outputs.version }}"
        TAG_NAME="${GITHUB_REF#refs/tags/}"

        # ÁîüÊàêÂèëÂ∏ÉËØ¥Êòé
        cat > release-notes.md << EOF
        # tinyMediaManager ${TAG_NAME}

        ## üéâ Êñ∞ÁâàÊú¨ÂèëÂ∏É

        ËøôÊòØ tinyMediaManager ÁöÑ ${TAG_NAME} ÁâàÊú¨ÔºåÊîØÊåÅÂ§ö‰∏™Âπ≥Âè∞„ÄÇ

        ## üì¶ ‰∏ãËΩΩ

        ### Windows
        - **Windows x64**: \`tinyMediaManager-${VERSION}-windows-amd64.zip\`

        ### Linux
        - **Linux x64**: \`tinyMediaManager-${VERSION}-linux-x64.tar.bz2\`
        - **Linux ARM64**: \`tinyMediaManager-${VERSION}-linux-aarch64.tar.bz2\`

        ### macOS
        - **macOS Intel**: \`tinyMediaManager-${VERSION}-macos-x64.tar.bz2\`
        - **macOS Apple Silicon**: \`tinyMediaManager-${VERSION}-macos-aarch64.tar.bz2\`

        ## üîê Ê†°È™åÂíå
        ÊØè‰∏™‰∏ãËΩΩÂåÖÈÉΩÊèê‰æõ‰∫Ü SHA256 Ê†°È™åÂíåÊñá‰ª∂ÔºåËØ∑Âú®ÂÆâË£ÖÂâçÈ™åËØÅÊñá‰ª∂ÂÆåÊï¥ÊÄß„ÄÇ

        ## üìã Á≥ªÁªüË¶ÅÊ±Ç
        - Java 17 ÊàñÊõ¥È´òÁâàÊú¨
        - ÊîØÊåÅÁöÑÊìç‰ΩúÁ≥ªÁªüÔºöWindows 10+, macOS 10.14+, Linux (ÂêÑ‰∏ªË¶ÅÂèëË°åÁâà)

        ## üêõ ÈóÆÈ¢òÂèçÈ¶à
        Â¶ÇÊûúÈÅáÂà∞ÈóÆÈ¢òÔºåËØ∑Âú® [GitHub Issues](https://github.com/jonntd/tinymediamanager/issues) ‰∏≠Êä•Âëä„ÄÇ
        EOF

        echo "release-notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: tinyMediaManager ${{ github.ref_name }}
        body: ${{ steps.release-notes.outputs.release-notes }}
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true

  # ÊûÑÂª∫Áä∂ÊÄÅÈÄöÁü•
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always()

    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.build-and-test.result }}" == "success" ]]; then
          if [[ "${{ needs.build-platforms.result }}" == "success" || "${{ needs.build-platforms.result }}" == "skipped" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ ÊûÑÂª∫ÊàêÂäüÂÆåÊàê" >> $GITHUB_OUTPUT
          else
            echo "status=partial" >> $GITHUB_OUTPUT
            echo "message=‚ö†Ô∏è Âü∫Á°ÄÊûÑÂª∫ÊàêÂäüÔºå‰ΩÜÂπ≥Âè∞ÊûÑÂª∫Â§±Ë¥•" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=‚ùå ÊûÑÂª∫Â§±Ë¥•" >> $GITHUB_OUTPUT
        fi

    - name: Print build summary
      run: |
        echo "üèóÔ∏è ÊûÑÂª∫ÊëòË¶Å"
        echo "=============="
        echo "Áä∂ÊÄÅ: ${{ steps.status.outputs.message }}"
        echo "Âü∫Á°ÄÊûÑÂª∫: ${{ needs.build-and-test.result }}"
        echo "Âπ≥Âè∞ÊûÑÂª∫: ${{ needs.build-platforms.result }}"
        echo "ÁâàÊú¨: ${{ needs.build-and-test.outputs.version }}"
        echo "Â∫îËØ•ÂèëÂ∏É: ${{ needs.build-and-test.outputs.should-release }}"
